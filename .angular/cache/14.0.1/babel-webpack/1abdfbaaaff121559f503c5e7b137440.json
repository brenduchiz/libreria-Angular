{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/auth/auth.service\";\nimport * as i3 from \"src/app/services/users/users.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/forms\";\nimport * as i8 from \"@angular/material/card\";\n\nfunction LoginComponentComponent_mat_error_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" No es un correo v\\u00E1lido \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponentComponent_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Email es requerido \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponentComponent_mat_error_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" La contrase\\u00F1a no es valida \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport class LoginComponentComponent {\n  constructor(router, authService, userService) {\n    this.router = router;\n    this.authService = authService;\n    this.userService = userService;\n    this.token = '';\n    this.loginForm = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [Validators.required])\n    });\n  }\n\n  ngOnInit() {}\n\n  getoPrivate() {\n    this.router.navigate(['/app']);\n  }\n\n  login() {\n    /*    if (!this.loginForm.valid) return;\r\n       this.getoPrivate() */\n    this.authService.authenticate(this.loginForm.value).pipe(switchMap(() => this.userService.getUsers()));\n  }\n  /*   async login() {\r\n      if (!this.loginForm.valid) return;\r\n      const res = await this.authService.authenticate(this.loginForm.value);\r\n      this.getoPrivate()\r\n      this.token = res.data.token\r\n      this.users(this.token)\r\n    } */\n\n\n  users(token) {\n    this.userService.getUsers(token).subscribe(user => {\n      this.usersProfile = user.data;\n    });\n  }\n\n}\n\nLoginComponentComponent.ɵfac = function LoginComponentComponent_Factory(t) {\n  return new (t || LoginComponentComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.UsersService));\n};\n\nLoginComponentComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponentComponent,\n  selectors: [[\"app-login-component\"]],\n  decls: 18,\n  vars: 4,\n  consts: [[3, \"formGroup\", \"submit\"], [\"fxLayoutAlign\", \"center center\", 1, \"text-center\", \"mt-3\"], [\"appearance\", \"fill\", 1, \"example-form-field\"], [\"matInput\", \"\", \"formControlName\", \"email\", \"placeholder\", \"email\", \"type\", \"email\"], [4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"contrase\\u00F1a\"], [1, \"mx-auto\"], [1, \"btn\", \"button-color-card\", \"mt-4\", \"btn-lg\"]],\n  template: function LoginComponentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"submit\", function LoginComponentComponent_Template_form_submit_0_listener() {\n        return ctx.login();\n      });\n      i0.ɵɵelementStart(1, \"mat-card\", 1)(2, \"div\")(3, \"mat-form-field\", 2)(4, \"mat-label\");\n      i0.ɵɵtext(5, \"E-mail\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 3);\n      i0.ɵɵtemplate(7, LoginComponentComponent_mat_error_7_Template, 2, 0, \"mat-error\", 4);\n      i0.ɵɵtemplate(8, LoginComponentComponent_mat_error_8_Template, 2, 0, \"mat-error\", 4);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"div\")(10, \"mat-form-field\", 2)(11, \"mat-label\");\n      i0.ɵɵtext(12, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 5);\n      i0.ɵɵtemplate(14, LoginComponentComponent_mat_error_14_Template, 2, 0, \"mat-error\", 4);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"div\", 6)(16, \"button\", 7);\n      i0.ɵɵtext(17, \" Log in \");\n      i0.ɵɵelementEnd()()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls[\"email\"].hasError(\"email\") || false);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls[\"email\"].hasError(\"required\") || false);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls[\"password\"].errors);\n    }\n  },\n  dependencies: [i4.NgIf, i5.MatError, i5.MatFormField, i5.MatLabel, i6.MatInput, i7.ɵNgNoValidate, i7.DefaultValueAccessor, i7.NgControlStatus, i7.NgControlStatusGroup, i7.FormGroupDirective, i7.FormControlName, i8.MatCard],\n  styles: [\".card-container[_ngcontent-%COMP%] {\\n  display: grid;\\n  margin-top: 90px;\\n  gap: 2rem;\\n  grid-template-columns: repeat(auto-fill, minmax(21rem, 1fr));\\n}\\n\\n.button-color-card[_ngcontent-%COMP%] {\\n  background-color: #12f848;\\n}\\n\\nmat-card[_ngcontent-%COMP%] {\\n  background: #db79c6;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ2luLWNvbXBvbmVudC5jb21wb25lbnQuc2NzcyIsIi4uXFwuLlxcLi5cXC4uXFwuLlxcLi5cXC4uXFxBbmd1bGFyLSUyMGNvdXJzZVxcdGVtYTNcXGxpYnJlcmlhXFxzcmNcXGFwcFxccHVibGljXFxsb2dpblxcbG9naW4tY29tcG9uZW50LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksYUFBQTtFQUNBLGdCQUFBO0VBQ0EsU0FBQTtFQUVBLDREQUFBO0FDQUo7O0FESUE7RUFDSSx5QkFBQTtBQ0RKOztBREtBO0VBQ0ksbUJBQUE7QUNGSiIsImZpbGUiOiJsb2dpbi1jb21wb25lbnQuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY2FyZC1jb250YWluZXJ7XHJcbiAgICBkaXNwbGF5OmdyaWQ7XHJcbiAgICBtYXJnaW4tdG9wOiA5MHB4O1xyXG4gICAgZ2FwOiAycmVtO1xyXG4gICAgXHJcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpbGwsIG1pbm1heCgyMXJlbSwgMWZyKSk7XHJcbiAgXHJcbn1cclxuXHJcbi5idXR0b24tY29sb3ItY2FyZCB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTJmODQ4IDtcclxufVxyXG5cclxuXHJcbm1hdC1jYXJke1xyXG4gICAgYmFja2dyb3VuZDogI2RiNzljNiA7XHJcbn0iLCIuY2FyZC1jb250YWluZXIge1xuICBkaXNwbGF5OiBncmlkO1xuICBtYXJnaW4tdG9wOiA5MHB4O1xuICBnYXA6IDJyZW07XG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZmlsbCwgbWlubWF4KDIxcmVtLCAxZnIpKTtcbn1cblxuLmJ1dHRvbi1jb2xvci1jYXJkIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzEyZjg0ODtcbn1cblxubWF0LWNhcmQge1xuICBiYWNrZ3JvdW5kOiAjZGI3OWM2O1xufSJdfQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,UAAjC,QAAmD,gBAAnD;AAEA,SAASC,SAAT,QAA0B,MAA1B;;;;;;;;;;;;;ICKYC;IACIA;IACJA;;;;;;IACAA;IACIA;IACJA;;;;;;IAOAA;IACIA;IACJA;;;;ADTZ,OAAM,MAAOC,uBAAP,CAA8B;EAWlCC,YAAoBC,MAApB,EAA4CC,WAA5C,EAA8EC,WAA9E,EAAuG;IAAnF;IAAwB;IAAkC;IAVvE,aAAgB,EAAhB;IAKA,iBAAY,IAAIR,SAAJ,CAAc;MAC/BS,KAAK,EAAE,IAAIV,WAAJ,CAAgB,EAAhB,EAAoB,CAACE,UAAU,CAACS,QAAZ,EAAsBT,UAAU,CAACQ,KAAjC,CAApB,CADwB;MAE/BE,QAAQ,EAAE,IAAIZ,WAAJ,CAAgB,EAAhB,EAAoB,CAACE,UAAU,CAACS,QAAZ,CAApB;IAFqB,CAAd,CAAZ;EAKqG;;EAE5GE,QAAQ,IACP;;EACDC,WAAW;IACT,KAAKP,MAAL,CAAYQ,QAAZ,CAAqB,CAAC,MAAD,CAArB;EACD;;EAEDC,KAAK;IACH;;IAEA,KAAKR,WAAL,CAAiBS,YAAjB,CAA8B,KAAKC,SAAL,CAAeC,KAA7C,EACGC,IADH,CAEIjB,SAAS,CAAC,MAAM,KAAKM,WAAL,CAAiBY,QAAjB,EAAP,CAFb;EAID;EAGD;;;;;;;;;EAQAC,KAAK,CAACC,KAAD,EAAc;IACjB,KAAKd,WAAL,CAAiBY,QAAjB,CAA0BE,KAA1B,EACGC,SADH,CACaC,IAAI,IAAG;MAGhB,KAAKC,YAAL,GAAoBD,IAAI,CAACE,IAAzB;IACD,CALH;EAMD;;AA5CiC;;;mBAAvBtB,yBAAuBD;AAAA;;;QAAvBC;EAAuBuB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCZpC5B;MAA8BA;QAAA,OAAU6B,WAAV;MAAiB,CAAjB;MAC1B7B,oCAAiE,CAAjE,EAAiE,KAAjE,EAAiE,CAAjE,EAAiE,gBAAjE,EAAiE,CAAjE,EAAiE,CAAjE,EAAiE,WAAjE;MAImBA;MAAMA;MACjBA;MACAA;MAGAA;MAGJA;MAEJA,4BAAK,EAAL,EAAK,gBAAL,EAAK,CAAL,EAAK,EAAL,EAAK,WAAL;MAEmBA;MAAQA;MACnBA;MACAA;MAGFA;MAENA,gCAAqB,EAArB,EAAqB,QAArB,EAAqB,CAArB;MAEIA;MACNA;;;;MA3BIA;MAOkBA;MAAAA;MAGAA;MAAAA;MASAA;MAAAA","names":["FormControl","FormGroup","Validators","switchMap","i0","LoginComponentComponent","constructor","router","authService","userService","email","required","password","ngOnInit","getoPrivate","navigate","login","authenticate","loginForm","value","pipe","getUsers","users","token","subscribe","user","usersProfile","data","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\brmorales.STFMXC1451\\Documents\\Angular- course\\tema3\\libreria\\src\\app\\public\\login\\login-component.component.ts","C:\\Users\\brmorales.STFMXC1451\\Documents\\Angular- course\\tema3\\libreria\\src\\app\\public\\login\\login-component.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { switchMap } from 'rxjs';\nimport { Users } from 'src/app/Interfaces/users';\nimport { AuthService } from 'src/app/services/auth/auth.service';\nimport { UsersService } from 'src/app/services/users/users.service';\n\n@Component({\n  selector: 'app-login-component',\n  templateUrl: './login-component.component.html',\n  styleUrls: ['./login-component.component.scss']\n})\nexport class LoginComponentComponent implements OnInit {\n  public token: string = '';\n  public usersProfile: Users[] | undefined;\n\n\n\n  public loginForm = new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.email]),\n    password: new FormControl('', [Validators.required])\n  })\n\n  constructor(private router: Router, private authService: AuthService, private userService: UsersService) { }\n\n  ngOnInit(): void {\n  }\n  getoPrivate() {\n    this.router.navigate(['/app'])\n  }\n\n  login() {\n    /*    if (!this.loginForm.valid) return;\n       this.getoPrivate() */\n    this.authService.authenticate(this.loginForm.value)\n      .pipe(\n        switchMap(() => this.userService.getUsers())\n      )\n  }\n\n\n  /*   async login() {\n      if (!this.loginForm.valid) return;\n      const res = await this.authService.authenticate(this.loginForm.value);\n      this.getoPrivate()\n      this.token = res.data.token\n      this.users(this.token)\n    } */\n\n  users(token: string) {\n    this.userService.getUsers(token)\n      .subscribe(user => {\n\n\n        this.usersProfile = user.data\n      });\n  }\n}\n","\n<form [formGroup]=\"loginForm\" (submit)=\"login()\">\n    <mat-card class=\"text-center mt-3\" fxLayoutAlign=\"center center\"> \n       \n    <div>\n        <mat-form-field class=\"example-form-field\" appearance=\"fill\">    \n            <mat-label>E-mail</mat-label>\n            <input matInput  formControlName=\"email\" placeholder=\"email\" type=\"email\" >\n            <mat-error *ngIf=\"loginForm.controls['email'].hasError('email') || false \" >\n                No es un correo válido\n            </mat-error>\n            <mat-error *ngIf=\"loginForm.controls['email'].hasError('required') || false \" >\n                Email es requerido\n            </mat-error>\n        </mat-form-field>\n    </div>\n    <div>\n        <mat-form-field class=\"example-form-field\" appearance=\"fill\">\n            <mat-label>Password</mat-label>\n            <input matInput  type=\"password\" formControlName=\"password\" placeholder=\"contraseña\">\n            <mat-error *ngIf=\"loginForm.controls['password'].errors\" >\n                La contraseña no es valida\n            </mat-error>\n          </mat-form-field>\n    </div>\n    <div class=\"mx-auto\">\n    <button class=\"btn button-color-card mt-4  btn-lg\" >\n        Log in\n  </button>\n    </div>\n</mat-card>\n</form>\n"]},"metadata":{},"sourceType":"module"}