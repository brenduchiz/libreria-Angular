{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/brmorales.STFMXC1451/Documents/Angular- course/tema3/libreria/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/auth/auth.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"@angular/material/card\";\n\nfunction LoginComponentComponent_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" No es un correo v\\u00E1lido \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponentComponent_mat_error_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Email es requerido \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponentComponent_mat_error_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" La contrase\\u00F1a no es valida \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport class LoginComponentComponent {\n  constructor(router, authService) {\n    this.router = router;\n    this.authService = authService;\n    this.loginForm = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [Validators.required])\n    });\n  }\n\n  ngOnInit() {}\n\n  getoPrivate() {\n    this.router.navigate(['/app']);\n  }\n\n  login() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this.loginForm.valid) return;\n      const res = yield _this.authService.authenticate(_this.loginForm.value);\n\n      _this.getoPrivate();\n\n      console.log(res);\n    })();\n  }\n\n}\n\nLoginComponentComponent.ɵfac = function LoginComponentComponent_Factory(t) {\n  return new (t || LoginComponentComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AuthService));\n};\n\nLoginComponentComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponentComponent,\n  selectors: [[\"app-login-component\"]],\n  decls: 19,\n  vars: 4,\n  consts: [[3, \"formGroup\", \"submit\"], [\"fxLayoutAlign\", \"center center\", 1, \"text-center\", \"mt-3\"], [\"src\", \"../../../assets/image/Rick-And-Morty-PNG-Images.png\", 1, \"mx-auto\", \"mb-3\", 2, \"max-width\", \"700px\"], [\"appearance\", \"fill\", 1, \"example-form-field\"], [\"matInput\", \"\", \"formControlName\", \"email\", \"placeholder\", \"email\", \"type\", \"email\"], [4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"contrase\\u00F1a\"], [1, \"mx-auto\"], [1, \"btn\", \"button-color-card\", \"mt-4\", \"btn-lg\"]],\n  template: function LoginComponentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"submit\", function LoginComponentComponent_Template_form_submit_0_listener() {\n        return ctx.login();\n      });\n      i0.ɵɵelementStart(1, \"mat-card\", 1);\n      i0.ɵɵelement(2, \"img\", 2);\n      i0.ɵɵelementStart(3, \"div\")(4, \"mat-form-field\", 3)(5, \"mat-label\");\n      i0.ɵɵtext(6, \"E-mail\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 4);\n      i0.ɵɵtemplate(8, LoginComponentComponent_mat_error_8_Template, 2, 0, \"mat-error\", 5);\n      i0.ɵɵtemplate(9, LoginComponentComponent_mat_error_9_Template, 2, 0, \"mat-error\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"div\")(11, \"mat-form-field\", 3)(12, \"mat-label\");\n      i0.ɵɵtext(13, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(14, \"input\", 6);\n      i0.ɵɵtemplate(15, LoginComponentComponent_mat_error_15_Template, 2, 0, \"mat-error\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"div\", 7)(17, \"button\", 8);\n      i0.ɵɵtext(18, \" Log in \");\n      i0.ɵɵelementEnd()()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls[\"email\"].hasError(\"email\") || false);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls[\"email\"].hasError(\"required\") || false);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls[\"password\"].errors);\n    }\n  },\n  dependencies: [i3.NgIf, i4.MatError, i4.MatFormField, i4.MatLabel, i5.MatInput, i6.ɵNgNoValidate, i6.DefaultValueAccessor, i6.NgControlStatus, i6.NgControlStatusGroup, i6.FormGroupDirective, i6.FormControlName, i7.MatCard],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJsb2dpbi1jb21wb25lbnQuY29tcG9uZW50LnNjc3MifQ== */\"]\n});","map":{"version":3,"mappings":";AACA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,UAAjC,QAAmD,gBAAnD;;;;;;;;;;;;ICOYC;IACIA;IACJA;;;;;;IACAA;IACIA;IACJA;;;;;;IAOAA;IACIA;IACJA;;;;ADZZ,OAAM,MAAOC,uBAAP,CAA8B;EAOlCC,YAAoBC,MAApB,EAA4CC,WAA5C,EAAoE;IAAhD;IAAwB;IALrC,iBAAY,IAAIN,SAAJ,CAAc;MAC/BO,KAAK,EAAE,IAAIR,WAAJ,CAAgB,EAAhB,EAAoB,CAACE,UAAU,CAACO,QAAZ,EAAsBP,UAAU,CAACM,KAAjC,CAApB,CADwB;MAE/BE,QAAQ,EAAE,IAAIV,WAAJ,CAAgB,EAAhB,EAAoB,CAACE,UAAU,CAACO,QAAZ,CAApB;IAFqB,CAAd,CAAZ;EAKkE;;EAEzEE,QAAQ,IACP;;EACDC,WAAW;IACT,KAAKN,MAAL,CAAYO,QAAZ,CAAqB,CAAC,MAAD,CAArB;EACD;;EAEKC,KAAK;IAAA;;IAAA;MACT,IAAI,CAAC,KAAI,CAACC,SAAL,CAAeC,KAApB,EAA2B;MAC3B,MAAMC,GAAG,SAAS,KAAI,CAACV,WAAL,CAAiBW,YAAjB,CAA8B,KAAI,CAACH,SAAL,CAAeI,KAA7C,CAAlB;;MACA,KAAI,CAACP,WAAL;;MACAQ,OAAO,CAACC,GAAR,CAAYJ,GAAZ;IAJS;EAKV;;AApBiC;;;mBAAvBb,yBAAuBD;AAAA;;;QAAvBC;EAAuBkB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCTpCvB;MAA8BA;QAAA,OAAUwB,WAAV;MAAiB,CAAjB;MAC1BxB;MACIA;MACJA,4BAAK,CAAL,EAAK,gBAAL,EAAK,CAAL,EAAK,CAAL,EAAK,WAAL;MAEmBA;MAAMA;MACjBA;MACAA;MAGAA;MAGJA;MAEJA,6BAAK,EAAL,EAAK,gBAAL,EAAK,CAAL,EAAK,EAAL,EAAK,WAAL;MAEmBA;MAAQA;MACnBA;MACAA;MAGFA;MAENA,gCAAqB,EAArB,EAAqB,QAArB,EAAqB,CAArB;MAEIA;MACNA;;;;MA3BIA;MAOkBA;MAAAA;MAGAA;MAAAA;MASAA;MAAAA","names":["FormControl","FormGroup","Validators","i0","LoginComponentComponent","constructor","router","authService","email","required","password","ngOnInit","getoPrivate","navigate","login","loginForm","valid","res","authenticate","value","console","log","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\brmorales.STFMXC1451\\Documents\\Angular- course\\tema3\\libreria\\src\\app\\public\\login\\login-component.component.ts","C:\\Users\\brmorales.STFMXC1451\\Documents\\Angular- course\\tema3\\libreria\\src\\app\\public\\login\\login-component.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth/auth.service';\n\n@Component({\n  selector: 'app-login-component',\n  templateUrl: './login-component.component.html',\n  styleUrls: ['./login-component.component.scss']\n})\nexport class LoginComponentComponent implements OnInit {\n\n  public loginForm = new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.email]),\n    password: new FormControl('', [Validators.required])\n  })\n\n  constructor(private router: Router, private authService: AuthService) { }\n\n  ngOnInit(): void {\n  }\n  getoPrivate() {\n    this.router.navigate(['/app'])\n  }\n\n  async login() {\n    if (!this.loginForm.valid) return;\n    const res = await this.authService.authenticate(this.loginForm.value);\n    this.getoPrivate()\n    console.log(res)\n  }\n\n\n\n}\n","\n<form [formGroup]=\"loginForm\" (submit)=\"login()\">\n    <mat-card class=\"text-center mt-3\" fxLayoutAlign=\"center center\"> \n        <img class=\"mx-auto mb-3\" style=\"max-width: 700px;\" src=\"../../../assets/image/Rick-And-Morty-PNG-Images.png\">\n    <div>\n        <mat-form-field class=\"example-form-field\" appearance=\"fill\">    \n            <mat-label>E-mail</mat-label>\n            <input matInput  formControlName=\"email\" placeholder=\"email\" type=\"email\" >\n            <mat-error *ngIf=\"loginForm.controls['email'].hasError('email') || false \" >\n                No es un correo válido\n            </mat-error>\n            <mat-error *ngIf=\"loginForm.controls['email'].hasError('required') || false \" >\n                Email es requerido\n            </mat-error>\n        </mat-form-field>\n    </div>\n    <div>\n        <mat-form-field class=\"example-form-field\" appearance=\"fill\">\n            <mat-label>Password</mat-label>\n            <input matInput  type=\"password\" formControlName=\"password\" placeholder=\"contraseña\">\n            <mat-error *ngIf=\"loginForm.controls['password'].errors\" >\n                La contraseña no es valida\n            </mat-error>\n          </mat-form-field>\n    </div>\n    <div class=\"mx-auto\">\n    <button class=\"btn button-color-card mt-4  btn-lg\" >\n        Log in\n  </button>\n    </div>\n</mat-card>\n</form>\n"]},"metadata":{},"sourceType":"module"}